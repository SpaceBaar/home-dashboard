<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>E-Paper Dashboard</title>
  <% if (typeof hasCustomFonts !== 'undefined' && hasCustomFonts) { %>
  <!-- Custom local fonts -->
  <link rel="stylesheet" href="/styles/fonts/fonts.css">
  <% } else { %>
  <!-- Default: Geist Mono from Google Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Geist+Mono:wght@400;500;600&display=swap" rel="stylesheet">
  <% } %>
  <link rel="stylesheet" href="/styles/dashboard.css">
  <script src="https://unpkg.com/@phosphor-icons/web@2.0.3"></script>
  <style>
    :root {
      --display-width: <%= display_width %>px;
      --display-height: <%= display_height %>px;
    }
  </style>
</head>
<body>
  <%
    const formatDate = (date) => {
      const d = new Date(date);
      const days = ['Sun', 'Mon', 'Tues', 'Weds', 'Thurs', 'Fri', 'Sat'];
      const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];
      const dayName = days[d.getDay()];
      const month = months[d.getMonth()];
      const day = d.getDate();
      const year = d.getFullYear();
      const suffix = day === 1 || day === 21 || day === 31 ? 'st' : day === 2 || day === 22 ? 'nd' : day === 3 || day === 23 ? 'rd' : 'th';
      return `${dayName} ${month} ${day}${suffix}, ${year}`;
    };
    
    const formatTime = (date) => {
      const d = new Date(date);
      let hours = d.getHours();
      const minutes = d.getMinutes();
      const ampm = hours >= 12 ? 'pm' : 'am';
      hours = hours % 12 || 12;
      return `${hours}:${minutes.toString().padStart(2, '0')}${ampm}`;
    };
    
    
    // Weather icon mapping system - maps icon codes to Phosphor icon classes
    const weatherIconMap = {
      'sunny': 'ph-sun',
      'clear': 'ph-sun',
      'partly_cloudy': 'ph-cloud-sun',
      'cloudy': 'ph-cloud',
      'overcast': 'ph-cloud',
      'rain': 'ph-cloud-rain',
      'drizzle': 'ph-cloud-rain',
      'showers': 'ph-cloud-rain',
      'stormy': 'ph-cloud-lightning',
      'thunder': 'ph-cloud-lightning',
      'snow': 'ph-cloud-snow',
      'sleet': 'ph-cloud-snow',
      'fog': 'ph-cloud-fog',
      'mist': 'ph-cloud-fog',
      'haze': 'ph-cloud-fog',
      'wind': 'ph-wind',
      'default': 'ph-sun'
    };
    
    // Helper function to check if it's nighttime
    const isNighttime = () => {
      if (!sun?.sunrise || !sun?.sunset) return false;
      
      const now = new Date();
      const today = now.toISOString().split('T')[0];
      
      // Parse sunrise and sunset times (format: "07:15 AM")
      const parseTime = (timeStr) => {
        const [time, period] = timeStr.split(' ');
        let [hours, minutes] = time.split(':').map(Number);
        if (period === 'PM' && hours !== 12) hours += 12;
        if (period === 'AM' && hours === 12) hours = 0;
        return new Date(`${today}T${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:00`);
      };
      
      const sunrise = parseTime(sun.sunrise);
      const sunset = parseTime(sun.sunset);
      
      return now < sunrise || now > sunset;
    };
    
    // Helper function to get Phosphor icon class from weather icon code
    // applyNighttime: If true, shows moon icon for clear conditions at night (default: true)
    const getWeatherIcon = (iconCode, applyNighttime = true) => {
      if (!iconCode) return weatherIconMap['default'];
      const code = String(iconCode).toLowerCase();
      
      // Show moon icon at night for clear/sunny conditions (only for current weather)
      if (applyNighttime && (code === 'sunny' || code === 'clear') && isNighttime()) {
        return 'ph-moon';
      }
      
      return weatherIconMap[code] || weatherIconMap['default'];
    };
    
    // Helper function to generate moon phase SVG
    const getMoonPhaseSVG = (phase, direction, illumination) => {
      // Use provided illumination only
      const size = 20;
      const center = size / 2;
      const outerRadius = (size / 2);
      const innerRadius = outerRadius - 2; // 2px inset from outer

      const num = Number(illumination);
      if (!Number.isFinite(num)) {
        // Neutral icon when illumination missing
        return `<svg width="${size}" height="${size}" viewBox="0 0 ${size} ${size}" style="display: block;"><circle cx="${center}" cy="${center}" r="${outerRadius}" fill="currentColor"/><circle cx="${center}" cy="${center}" r="${innerRadius}" fill="white"/></svg>`;
      }
      const actualIllumination = num;
      const isWaxing = direction === 'waxing';

      // Generate unique ID for this moon instance
      const maskId = `moon-mask-${phase}-${direction}`;
      
      // SVG moon with proper masking
      let svg = `<svg width="${size}" height="${size}" viewBox="0 0 ${size} ${size}" style="display: block;">`;
      
      // Calculate elliptical shadow for accurate moon phase
      // The lit portion grows from 0% to 100%
      
      // For waxing moon:
      //   0% = new moon (fully shadowed)
      //   50% = first quarter (right half lit, shadow on left)
      //   100% = full moon (fully lit, no shadow)
      
      // Shadow calculation:
      // - shadowScaleX: width of the ellipse (1 = full circle, 0 = line)
      // - shadowOffset: horizontal position of shadow center
      
      let shadowScaleX, shadowOffset;
      
      if (actualIllumination === 0) {
        // New moon - full shadow circle
        shadowScaleX = 1;
        shadowOffset = 0;
      } else if (actualIllumination === 100) {
        // Full moon - no shadow (move it off screen)
        shadowScaleX = 1;
        shadowOffset = isWaxing ? -20 : 20;
      } else if (actualIllumination < 50) {
        // Crescent phase (0-50%): Shadow covers most of moon
        // Ellipse gets narrower as illumination increases
        shadowScaleX = 1 - (actualIllumination / 50); // 1 at 0%, 0 at 50%
        // Position shadow to show lit crescent on right (waxing) or left (waning)
        shadowOffset = isWaxing ? innerRadius * (1 - actualIllumination / 50) : -innerRadius * (1 - actualIllumination / 50);
      } else {
        // Gibbous phase (50-100%): small shadow
        // Ellipse gets narrower as illumination increases, and is 0 at 50%
        shadowScaleX = Math.abs(actualIllumination - 50) / 50; // 0 at 50%, 1 near 100% (used with offset off-screen at 100%)
        // Position shadow on left (waxing) or right (waning)
        shadowOffset = isWaxing ? -innerRadius * ((actualIllumination - 50) / 50) : innerRadius * ((actualIllumination - 50) / 50);
      }
      
      // Define mask using two-circle method: white moon minus shifted black circle
      svg += '<defs>';
      svg += `<mask id="${maskId}">`;
      // White base circle (reveals lit area)
      svg += `<circle cx="${center}" cy="${center}" r="${innerRadius}" fill="white"/>`;
      // Compute illumination fraction (0..1) and mask circle offset
      const f = Math.max(0, Math.min(1, actualIllumination / 100));
      const dx = 2 * innerRadius * f; // 0=new, r=half, 2r=full
      const maskCx = isWaxing ? (center - dx) : (center + dx);
      // Black circle subtracts shadow
      svg += `<circle cx="${maskCx}" cy="${center}" r="${innerRadius}" fill="black"/>`;
      svg += '</mask>';
      svg += '</defs>';
      
      // Outer circle (black outline)
      svg += `<circle cx="${center}" cy="${center}" r="${outerRadius}" fill="currentColor"/>`;
      
      // Inner white circle with mask applied
      svg += `<circle cx="${center}" cy="${center}" r="${innerRadius}" fill="white" mask="url(#${maskId})"/>`;
      
      svg += '</svg>';
      return svg;
    };
  %>
  
  <div class="system-info text-label-sm">
    <% if (battery_level !== null && battery_level <= 10) { %>
      <div class="battery-warning">Battery Low</div>
    <% } %>
    <div>
      <i class="ph-bold ph-arrows-clockwise"></i>
      <%= formatTime(date) %>
      <% if (battery_level !== null) { %>
        <div class="battery" style="--battery-level: <%= battery_level / 100 %>;"></div>
      <% } %>
    </div>
  </div>

  <div class="header">
    <div class="current-conditions">
      <div class="main-weather-icon">
        <i class="ph <%= getWeatherIcon(weather_icon) %>"></i>
      </div>
      <div class="big-temp"><%= Math.round(current_temp) %>°C</div>
      <div class="text-sm">Feels like <%= Math.round(feels_like) %>°C</div>
      <div class="text-sm flex items-center nowrap" style="margin-top: 8px; gap: 6px">
        <i class="ph-bold ph-sun-horizon icon-sm"></i>
        <div>
          <i class="ph-bold ph-arrow-up icon-xs" style="margin-right: 1px;"></i><%= sun?.sunrise || 'N/A' %>
        </div>
        <div>
          <i class="ph-bold ph-arrow-down icon-xs" style="margin-right: 1px;"></i><%= sun?.sunset || 'N/A' %>
        </div>
      </div>
    </div>
    
    <div>
      <div class="text-sm">
        <%= formatDate(date) %><% if (temp_comparison) { %> · <%= temp_comparison %><% } %>
      </div>
      <h1 class="weather-summary text-title" style="margin-top: 8px;">
        <%= (typeof daily_summary === 'string' && daily_summary.trim().length > 0) ? daily_summary : weather_description %>
      </h1>
      <% if (typeof clothing_suggestion !== 'undefined' && clothing_suggestion) { %>
      <div class="clothing-pill text-sm">
        <i class="icon-sm ph-fill ph-t-shirt"></i>
        <%= clothing_suggestion %>
      </div>
      <% } %>
    </div>
  </div>
  
  <div class="main-weather">
    <div class="flex flex-col" style="text-align: center;">
      <div class="text-label">
        <%= locations[0].name %> Today
      </div>
      <div class="flex flex-col flex-1" style="justify-content: center; gap: 12px; padding-top: 4px">
        <div class="text-lg flex" style="margin-left: -8px; gap: 2px; align-items: baseline; justify-content: center">
          <%= Math.round(locations[0].high) %>°C
          <div class="text-label-sm">High</div>
        </div>
        <div class="text-lg flex" style="gap: 7px; align-items: end; justify-content: center;">
          <div class="text-label-sm">Low</div>
          <%= Math.round(locations[0].low) %>°C
        </div>
      </div>
    </div>
    
    <div>
      <div class="forecast-graph" id="forecast-graph">
        <!-- SVG overlay for the line and dots -->
        <svg id="forecast-svg" style="position: absolute; top: 0; left: 0; z-index: 1;"></svg>
        
        <!-- Columns for each day -->
        <% forecast.forEach(function(day, i) { %>
          <div class="forecast-column" data-temp="<%= Math.round(day.high) %>" data-icon="<%= getWeatherIcon(day.icon, false) %>">
            <div class="forecast-temp-label text-label">
              <i class="ph-bold icon-sm"></i>
              <span class="temp-value"></span>
            </div>
            <div class="text-label"><%= (day.day || 'N/A').toUpperCase() %></div>
          </div>
        <% }); %>
        
        <script>
          document.addEventListener('DOMContentLoaded', function() {
            const container = document.getElementById('forecast-graph');
            const svg = document.getElementById('forecast-svg');
            const columns = container.querySelectorAll('.forecast-column');
            
            if (!container || !svg || columns.length === 0) {
              console.error('Forecast elements not found');
              return;
            }
            
            function drawForecast() {
              // Get container dimensions
              const rect = container.getBoundingClientRect();
              const width = rect.width;
              const height = rect.height;
              
              // Padding constraints for labels
              const topPadding = 24;  // Space for temp labels above
              const bottomPadding = 28; // Space for day labels below
              
              // Get temperatures from columns
              const temps = Array.from(columns).map(col => parseInt(col.dataset.temp));
              const maxTemp = Math.max(...temps);
              const minTemp = Math.min(...temps);
              const range = maxTemp - minTemp || 10;
              
              // Calculate column centers and y positions
              const columnWidth = width / columns.length;
              const graphHeight = height - bottomPadding;
              const availableHeight = graphHeight - topPadding;
              
              const points = temps.map((temp, i) => {
                const x = (i * columnWidth) + (columnWidth / 2);
                const normalizedTemp = (temp - minTemp) / range;
                const y = topPadding + availableHeight * (1 - normalizedTemp);
                return { x, y, temp };
              });
              
              // Set SVG dimensions
              svg.setAttribute('width', width);
              svg.setAttribute('height', height);
              svg.setAttribute('viewBox', `0 0 ${width} ${height}`);
              
              // Create smooth curve path
              let pathData = `M ${points[0].x} ${points[0].y}`;
              for (let i = 0; i < points.length - 1; i++) {
                const curr = points[i];
                const next = points[i + 1];
                const midX = (curr.x + next.x) / 2;
                pathData += ` C ${midX} ${curr.y}, ${midX} ${next.y}, ${next.x} ${next.y}`;
              }
              
              // Clear and redraw SVG
              svg.innerHTML = '';
              
              // Draw path
              const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
              path.setAttribute('d', pathData);
              path.setAttribute('fill', 'none');
              path.setAttribute('stroke', '#000');
              path.setAttribute('stroke-width', '1');
              path.setAttribute('stroke-linecap', 'round');
              path.setAttribute('stroke-linejoin', 'round');
              svg.appendChild(path);
              
              // Draw dots and position temp labels with icons
              points.forEach((point, i) => {
                // Draw dot
                const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
                circle.setAttribute('cx', point.x);
                circle.setAttribute('cy', point.y);
                circle.setAttribute('r', '3');
                circle.setAttribute('fill', '#000');
                svg.appendChild(circle);
                
                // Position temp label above dot and set icon + temp
                const tempLabel = columns[i].querySelector('.forecast-temp-label');
                const iconClass = columns[i].dataset.icon;
                const icon = tempLabel.querySelector('.icon-sm');
                const tempValue = tempLabel.querySelector('.temp-value');
                
                if (icon && iconClass) {
                  icon.className = 'ph-bold icon-sm ' + iconClass;
                }
                if (tempValue) {
                  tempValue.textContent = point.temp + '°C';
                }
                
                tempLabel.style.top = (point.y - 18) + 'px';
              });
            }
            
            // Draw on load
            setTimeout(drawForecast, 100);
            
            // Redraw on resize
            window.addEventListener('resize', drawForecast);
          });
        </script>
      </div>
    </div>
    
    <div class="flex flex-col" style="justify-content: space-between">
      <% 
      // Show up to 3 additional locations (indices 1, 2, and 3)
      for (let i = 1; i <= 3; i++) {
        if (i < locations.length) {
      %>
      <div class="flex items-center text-label">
        <div class="flex-1"><%= locations[i].name %></div>
        <i class="ph-bold icon-sm <%= getWeatherIcon(locations[i].icon, false) %>" style="margin-right: 6px;"></i>
        <%= Math.round(locations[i].current_temp) %>°C
      </div>
      <%
        }
      }
      %>
    </div>
  </div>
  
  <div class="footer">
    <div>
      <div class="weather-stats">
        <div class="stat">
          <i class="icon ph-bold ph-rainbow-cloud"></i>
          <div>
            <div class="dot-leader">
              <span class="label">24h</span>
              <span class="dots"></span>
              <span class="value"><%= precipitation && precipitation.last_24h_mm !== null ? precipitation.last_24h_mm.toFixed(2) : '0.00' %>mm</span>
            </div>
            <div class="dot-leader">
              <span class="label">7d</span>
              <span class="dots"></span>
              <span class="value"><%= precipitation && precipitation.week_total_mm !== null ? precipitation.week_total_mm.toFixed(2) : '0.00' %>mm</span>
            </div>
            <div class="dot-leader">
              <span class="label">YTD</span>
              <span class="dots"></span>
              <span class="value"><%= precipitation && precipitation.year_total_mm !== null ? precipitation.year_total_mm.toFixed(2) : '0.00' %>mm</span>
            </div>
          </div>
        </div>
        <div class="stat">
          <i class="icon ph-bold ph-drop-half-bottom"></i>
          <%= humidity %>%
        </div>
        <div class="stat">
          <i class="icon ph-bold ph-wind"></i>
          <%= wind.speed_mph %>km/h
        </div>
        <div class="stat">
          <div class="moon-icon">
            <%- getMoonPhaseSVG(moon.phase, moon.direction, moon.illumination) %>
          </div>
          <div class="text-label">
            <% const phaseParts = moon.phase.split('_'); %>
            <% phaseParts.forEach((part, i) => { %>
              <%= part %><% if (i < phaseParts.length - 1) { %><br/><% } %>
            <% }); %>
          </div>
        </div>
        <div class="stat">
          <i class="icon ph-bold ph-face-mask"></i>
          <div class="aqi-pill text-label"><%= air_quality.aqi %></div>
        </div>
      </div>
      
      <% if (vehicles && vehicles.length > 0) { %>
      <div class="vehicles">
        <% vehicles.slice(0, 2).forEach(function(vehicle) { %>
        <div class="flex items-center" style="gap: 12px">
          <% if (vehicle.make) { %>
            <% const brandLower = vehicle.make.trim().toLowerCase().replace(/\s+/g, '-'); %>
            <% const logoPath = `/assets/vehicle-logo/${brandLower}.png`; %>
            <div>
              <img 
                src="<%= logoPath %>" 
                alt="<%= vehicle.make %>" 
                width="40" 
                height="40" 
                style="display: block;"
                onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
              >
              <span style="display: none; height: 40px; align-items: center;" class="text-sm"><%= vehicle.make %></span>
            </div>
          <% } else { %>
            <div style="width: 40px; height: 40px; display: flex; align-items: center; justify-content: center;">
              <i class="ph-bold ph-car" style="font-size: 24px;"></i>
            </div>
          <% } %>
          <div>
            <%= vehicle.percent %>%<div class="slash"></div><%= Math.round(vehicle.range_miles) %>mi
          </div>
        </div>
        <% }); %>
      </div>
      <% } %>
    </div>
    
    <div class="flex flex-col" style="gap: 16px;">
      <% if (calendar_events && calendar_events.length > 0) { %>
        <% calendar_events.slice(0, 4).forEach(function(event) { %>
        <div class="calendar-event text-sm">
            <strong><%= event.title %></strong>
            <div><%= event.time %></div>
        </div>
        <% }); %>
      <% } else { %>
        <div class="calendar-empty">No upcoming events</div>
      <% } %>
    </div>
  </div>
</body>
</html>
