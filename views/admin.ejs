<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Dashboard Admin</title>
  <link rel="stylesheet" href="/styles/base.css">
  <link rel="stylesheet" href="/styles/admin.css">
</head>
<body>
  <div class="container">
    <h1>Dashboard Admin</h1>
    <div class="admin-grid">
      <div class="admin-main">
        <div class="card">
          <h2>Google Calendar events</h2>
          <div id="cal-auth-status" class="auth-status">
            <span class="loading">Checking authentication...</span>
          </div>
          <div id="cal-content"></div>
        </div>
        
        <div class="card">
          <h2>Car charge/fuel level via Smartcar API</h2>
          <div id="veh-content">
            <div class="loading">Loading vehicles...</div>
          </div>
          <a class="btn-secondary" href="/auth/smartcar">Add Car</a>
        </div>
      </div>
      
      <div class="admin-sidebar">
        <div id="services-content">
          <div class="loading">Loading services...</div>
      </div>
    </div>
  </div>

  <!-- Prompt Dialog -->
  <dialog id="prompt-dialog">
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
      <h3 style="margin: 0;">LLM Prompt</h3>
      <button class="btn" onclick="document.getElementById('prompt-dialog').close()">Close</button>
    </div>
    <pre id="prompt-content" style="background: #f5f5f5; padding: 16px; border-radius: 8px; overflow: auto; max-height: 60vh; white-space: pre-wrap; word-wrap: break-word; font-family: monospace; font-size: 12px; line-height: 1.5;"></pre>
  </dialog>
  
  <script>
    async function fetchJSON(url) {
      const res = await fetch(url);
      if (!res.ok) throw new Error('Request failed: ' + res.statusText);
      return await res.json();
    }

    function formatTimeAgo(timestamp) {
      const seconds = Math.floor((Date.now() - timestamp) / 1000);
      if (seconds < 60) return `${seconds}s ago`;
      const minutes = Math.floor(seconds / 60);
      if (minutes < 60) return `${minutes}m ago`;
      const hours = Math.floor(minutes / 60);
      if (hours < 24) return `${hours}h ago`;
      const days = Math.floor(hours / 24);
      return `${days}d ago`;
    }

    const calAuthStatus = document.getElementById('cal-auth-status');
    const calContent = document.getElementById('cal-content');
    const vehContent = document.getElementById('veh-content');

    async function checkCalendarAuth() {
      try {
        const status = await fetchJSON('/auth/status');
        if (status.authed) {
          calAuthStatus.innerHTML = `
            <a href="/auth/google/signout" class="btn-secondary">Sign out</a>
            <button class="btn-secondary" onclick="loadCalendars()">↻ Refresh calendars</button>
          `;
          loadCalendars();
        } else {
          calAuthStatus.innerHTML = '<a href="/auth/google" class="btn-secondary">Authenticate</a>';
          calContent.innerHTML = '';
        }
      } catch (e) {
        calAuthStatus.innerHTML = '<a href="/auth/google" class="btn-secondary">Authenticate</a>';
        calContent.innerHTML = '';
      }
    }

    async function loadCalendars() {
      calContent.innerHTML = '<div class="loading">Loading calendars...</div>';
      try {
        const data = await fetchJSON('/admin/calendars');
        if (data.items.length === 0) {
          calContent.innerHTML = '<div class="empty">No calendars found</div>';
          return;
        }
        calContent.innerHTML = "<p style='margin-bottom: 4px'><strong>Select which calendars to display events from</strong></p>" + data.items.map(function(c){
          return `
            <div class="calendar-item">
              <input type="checkbox" value="${c.id}" ${c.selected ? 'checked' : ''} onchange="saveCalendarSelection()">
              <span class="calendar-name">${c.summary}</span>
              ${c.primary ? '<span class="calendar-primary">(primary)</span>' : ''}
            </div>
          `;
        }).join('');
      } catch (e) { 
        calContent.innerHTML = '<div class="error">Error loading calendars: ' + e.message + '</div>';
      }
    }

    async function saveCalendarSelection() {
      const selected = Array.from(calContent.querySelectorAll('input[type=checkbox]:checked')).map(i=>i.value);
      try {
        await fetch('/admin/calendars', { 
          method:'POST', 
          headers:{'Content-Type':'application/json'}, 
          body: JSON.stringify({ selected_calendar_ids: selected }) 
        });
      } catch (e) {
        console.error('Failed to save calendar selection:', e);
      }
    }

    async function loadVehicles() {
      vehContent.innerHTML = '<div class="loading">Loading vehicles...</div>';
      try {
        const data = await fetchJSON('/admin/vehicles');
        if (data.items.length === 0) {
          vehContent.innerHTML = '<div class="empty">No vehicles connected</div>';
          return;
        }
        vehContent.innerHTML = data.items.map(function(v){
          const displayName = v.display_name || `${v.make} ${v.model}`;
          return `
            <div class="vehicle-item">
              <div class="vehicle-info">
                <div>
                  <div class="vehicle-name">${displayName}</div>
                  <div class="vehicle-details">${v.make} ${v.model}</div>
                </div>
              </div>
              <button class="btn-danger btn-small" onclick="removeVehicle('${v.id}')">Remove</button>
            </div>
          `;
        }).join('');
      } catch (e) { 
        vehContent.innerHTML = '<div class="error">Error loading vehicles: ' + e.message + '</div>';
      }
    }

    async function removeVehicle(vehicleId) {
      if (!confirm('Remove this vehicle from your dashboard?')) return;
      try {
        await fetch(`/admin/vehicles/${vehicleId}`, { method: 'DELETE' });
        loadVehicles();
      } catch (e) {
        alert('Failed to remove vehicle: ' + e.message);
      }
    }

    async function loadServices() {
      const servicesContent = document.getElementById('services-content');
      servicesContent.innerHTML = '<div class="loading">Loading services...</div>';
      try {
        const data = await fetchJSON('/api/services/status');
        const services = data.services;
        const displaySync = data.lastDisplaySync;
        const llmCost = data.llmCost;
        
        if (!services || Object.keys(services).length === 0) {
          servicesContent.innerHTML = '<div class="empty">No services found</div>';
          return;
        }
        
        // Build display sync status
        let displaySyncHtml = '';
        if (displaySync) {
          const timeAgo = formatTimeAgo(displaySync.timestamp);
          const statusClass = displaySync.status === 'success' ? 'status-healthy' : 'status-unhealthy';
          const statusIcon = displaySync.status === 'success' ? '●' : '○';
          const sizeKB = displaySync.imageSize ? Math.round(displaySync.imageSize / 1024) + 'KB' : '';
          
          displaySyncHtml = `
            <div class="service-item">
              <div class="service-header">
                <span class="service-status ${statusClass}">${statusIcon}</span>
                <span class="service-name">E-Paper Display</span>
              </div>
              ${displaySync.latency ? `<div class="service-detail">Latency: ${displaySync.latency}ms</div>` : ''}
              <div class="service-detail">Last sync ${timeAgo}${sizeKB ? ' • ' + sizeKB : ''} PNG</div>
              ${displaySync.error ? `<div class="service-detail" style="color: #dc2626;">Error: ${displaySync.error}</div>` : ''}
            </div>
          `;
        }
        
        servicesContent.innerHTML = displaySyncHtml + Object.entries(services).map(function([name, info]){
          const state = info.state || 'unknown';
          const isEnabled = info.isEnabled !== false;
          const displayName = info.name || name.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
          
          const statusClass = state === 'healthy' ? 'status-healthy' :
                             state === 'degraded' ? 'status-degraded' :
                             state === 'pending' ? 'status-pending' :
                             state === 'disabled' ? 'status-disabled' : 'status-unhealthy';
          const statusIcon = state === 'healthy' ? '●' : 
                            state === 'degraded' ? '◐' : 
                            state === 'pending' ? '○' :
                            state === 'disabled' ? '⊘' : '○';

          let details = '';
          
          // Status badge
          if (!isEnabled || state === 'disabled') {
            details += `<div class="service-detail">Disabled (Set credentials in .env)</div>`;
          } else if (state === 'pending') {
            details += `<div class="service-detail">Configured (waiting for first sync)</div>`;
          }
          
          // Latency
          if (info.latency) {
            details += `<div class="service-detail">Latency: ${info.latency}ms</div>`;
          }
          
          // Last fetch time (from cache)
          if (info.fetchedAt) {
            const lastFetch = new Date(info.fetchedAt);
            const now = new Date();
            const minutesAgo = Math.floor((now - lastFetch) / 60000);
            if (minutesAgo < 1) {
              details += `<div class="service-detail">Last fetch: just now</div>`;
            } else if (minutesAgo < 60) {
              details += `<div class="service-detail">Last fetch: ${minutesAgo}m ago</div>`;
            } else {
              const hoursAgo = Math.floor(minutesAgo / 60);
              details += `<div class="service-detail">Last fetch: ${hoursAgo}h ago</div>`;
            }
          }
          
          // Error message
          if (info.error) {
            details += `<div class="service-detail service-error">Error: ${info.error}</div>`;
          }
          
          // LLM cost information
          if (name === 'llm' && llmCost) {
            const lastCall = llmCost.last_call;
            const proj = llmCost.projections;
            const promptEscaped = lastCall.prompt ? lastCall.prompt.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;') : '';
            details += `<div class="service-detail">
              <span style="cursor: pointer; text-decoration: underline dotted;" data-prompt="${promptEscaped}" onclick="showPromptDialog(this.dataset.prompt)">${lastCall.total_tokens} tokens</span>. Cost: $${lastCall.cost_usd.toFixed(4)}, est. $${proj.monthly_cost_usd.toFixed(2)}/mo
            </div>`;
          }
          
          return `
            <div class="service-item">
              <div class="service-header">
                <span class="service-status ${statusClass}">${statusIcon}</span>
                <span class="service-name">${displayName}</span>
                <div class="service-cache">↻ ${info.cacheTTL / 60000} min</div>
              </div>
              ${details}
            </div>
          `;
        }).join('');
      } catch (e) { 
        servicesContent.innerHTML = '<div class="error">Error loading services: ' + e.message + '</div>';
      }
    }

    // Show prompt dialog
    function showPromptDialog(prompt) {
      const dialog = document.getElementById('prompt-dialog');
      const content = document.getElementById('prompt-content');
      content.textContent = prompt;
      dialog.showModal();
    }

    // Auto-load on page load
    document.addEventListener('DOMContentLoaded', function() {
      checkCalendarAuth();
      loadVehicles();
      loadServices();
      
      // Auto-refresh services status every 30 seconds
      setInterval(loadServices, 30000);
    });
  </script>
</body>
</html>
